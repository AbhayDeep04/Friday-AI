import speech_recognition as sr
import os

OPENAI_KEY = "sk-proj-Sm2ft6xSpohHfeJ8Dw3IT3BlbkFJypEXoFU9qg7xXpgfRtfr"

from openai import OpenAI

client = OpenAI(api_key=OPENAI_KEY)

# Converts text returned by GPT and converts it to speech
def SpeakText(command):
  from gtts import gTTS
  lang = 'en'
  tts = gTTS(text=command, lang=lang)
  # Save the audio to a temporary file
  tts.save("temp.mp3")
  # Play the audio file using mpg321 
  os.system("mpg321 temp.mp3")
  # Remove the temporary audio file once done speaking
  os.remove("temp.mp3")

#Speech Recognition core object
r = sr.Recognizer()

# Returns MyText: the text that was obtained after converting the user's speech to text using sr
def recordText():
    while (1):
        try:
            with sr.Microphone() as source2:
                #ambient adjustment
                r.adjust_for_ambient_noise(source2, duration=0.2)
                print("I'm listening")
                #listen 
                audio2 = r.listen(source2)
                #convert
                MyText = r.recognize_google(audio2)
                return MyText

        except sr.RequestError as e:
            print("Could not request result; {0}".format(e))

        except sr.UnknownValueError:
            print("Unknown error occured")

# Sends messages: an array with precious context and current text obtained using recordText() function to gpt for response generation
def sendToGPT(messages, model="gpt-3.5-turbo"):
    response = client.chat.completions.create(model=model,
                                              messages=messages,
                                              max_tokens=250,
                                              n=1,
                                              stop=None,
                                              temperature=0.5)
    #message is the response content to the user's query generated by gpt
    message = response.choices[0].message.content
    #append this to messages array for context maintaining 
    messages.append(response.choices[0].message)
    return message

#initial role of Friday added to the messages array
messages = [{"role": "user", "content": "Act as Friday, the AI assistant that Tony Stark created in the Iron Man and Avengers Movies."}]

while (1):
    #record
    text = recordText()
    #append
    messages.append({"role": "user", "content": text})
    #respnse
    response = sendToGPT(messages)
    #speak
    SpeakText(response)
    #print
    print(response)
    #exit
    if text.lower() == "exit" or "stop" or "terminate":
        print("Exiting...")
        break  
